# VSS Vision Platform Backend 统一配置文件
# ===========================================
# 支持多环境配置：default, dev, docker, prod
# 使用方式：--spring.profiles.active=dev|docker|prod

# ===========================================
# 基础配置（所有环境通用）
# ===========================================
spring.application.name=vision-platform-backend
server.port=${SERVER_PORT:3002}
server.address=0.0.0.0

# 文件上传配置
spring.servlet.multipart.max-file-size=${MAX_FILE_SIZE:10MB}
spring.servlet.multipart.max-request-size=${MAX_REQUEST_SIZE:10MB}

# AI推理服务配置
ai.inference.server.url=${AI_INFERENCE_URL:http://localhost:8000}
ai.inference.timeout=${AI_INFERENCE_TIMEOUT:30000}
ai.inference.enabled=${AI_INFERENCE_ENABLED:true}

# JWT配置
jwt.secret=${JWT_SECRET:vss-default-jwt-secret-key-for-hs512-algorithm-minimum-64-bytes-required}
jwt.expiration=${JWT_EXPIRATION:86400000}
jwt.refresh-expiration=${JWT_REFRESH_EXPIRATION:604800000}

# ===========================================
# 默认环境配置（H2内存数据库）
# ===========================================
# 数据库配置
spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.username=sa
spring.datasource.password=
spring.datasource.driver-class-name=org.h2.Driver

# JPA配置
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect

# 日志配置
logging.level.root=INFO
logging.level.com.vision=DEBUG
logging.level.org.springframework.security=DEBUG

# ===========================================
# 开发环境配置 (dev profile)
# ===========================================
---
spring.config.activate.on-profile=dev

# 服务器配置
server.port=${SERVER_PORT:3003}

# 数据库配置 - H2 内存数据库（开发环境）
spring.datasource.url=${DATABASE_URL:jdbc:h2:mem:vss_dev_db;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE}
spring.datasource.username=${DB_USERNAME:sa}
spring.datasource.password=${DB_PASSWORD:}
spring.datasource.driver-class-name=org.h2.Driver

# JPA 配置 - 开发环境
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect
spring.jpa.properties.hibernate.format_sql=true

# H2 控制台 - 开发环境启用
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
spring.h2.console.settings.web-allow-others=true

# 日志配置 - 开发环境详细日志
logging.level.root=${LOG_ROOT_LEVEL:INFO}
logging.level.com.vision=${LOG_LEVEL:DEBUG}
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.web=DEBUG
logging.level.org.springframework.data=DEBUG

# 文件日志 - 开发环境
logging.file.enabled=true
logging.file.name=logs/vss-backend-dev.log

# CORS 配置 - 开发环境宽松设置
cors.allowed-origins=http://localhost:3001,http://localhost:3000,http://frontend-dev:3001
cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS,PATCH
cors.allowed-headers=*
cors.allow-credentials=true

# 开发工具配置
spring.devtools.restart.enabled=true
spring.devtools.livereload.enabled=true

# 健康检查 - 开发环境显示详细信息
management.endpoints.web.exposure.include=health,info,env,metrics
management.endpoint.health.show-details=always
management.health.defaults.enabled=true

# JWT配置 - 开发环境
jwt.secret=${JWT_SECRET:vss-development-jwt-secret-key-for-hs512-algorithm-minimum-64-bytes-required-this-is-a-very-long-secure-key-for-development-only-do-not-use-in-production}

# 邮件配置 - 使用 Mailhog
spring.mail.host=${MAIL_HOST:mailhog-dev}
spring.mail.port=${MAILHOG_SMTP_PORT:1025}
spring.mail.protocol=smtp
spring.mail.properties.mail.smtp.auth=false
spring.mail.properties.mail.smtp.starttls.enable=false

# ===========================================
# Docker环境配置 (docker profile)
# ===========================================
---
spring.config.activate.on-profile=docker

# 数据库配置 - 支持多种数据库类型
spring.datasource.url=${DATABASE_URL:jdbc:h2:mem:vss_docker_db;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE}
spring.datasource.username=${DB_USERNAME:sa}
spring.datasource.password=${DB_PASSWORD:}
spring.datasource.driver-class-name=${DB_DRIVER:org.h2.Driver}

# JPA 配置 - Docker 环境
spring.jpa.hibernate.ddl-auto=${JPA_DDL_AUTO:create-drop}
spring.jpa.show-sql=${JPA_SHOW_SQL:true}
spring.jpa.properties.hibernate.dialect=${JPA_DIALECT:org.hibernate.dialect.H2Dialect}
spring.jpa.properties.hibernate.format_sql=${JPA_FORMAT_SQL:true}

# H2 控制台配置 - Docker 环境
spring.h2.console.enabled=${H2_CONSOLE_ENABLED:true}
spring.h2.console.path=${H2_CONSOLE_PATH:/h2-console}
spring.h2.console.settings.web-allow-others=true

# CORS 配置 - Docker 环境（容器间通信）
cors.allowed-origins=${CORS_ORIGIN:http://localhost:3000,http://frontend:80,http://frontend-dev:3001}
cors.allowed-methods=${CORS_METHODS:GET,POST,PUT,DELETE,OPTIONS}
cors.allowed-headers=${CORS_HEADERS:*}
cors.allow-credentials=${CORS_CREDENTIALS:true}

# 日志配置 - Docker 环境
logging.level.root=${LOG_ROOT_LEVEL:INFO}
logging.level.com.vision=${LOG_LEVEL:DEBUG}
logging.level.org.springframework.security=${SECURITY_LOG_LEVEL:DEBUG}
logging.level.org.springframework.web=${WEB_LOG_LEVEL:DEBUG}

# 文件日志 - Docker 环境（映射到卷）
logging.file.enabled=${LOG_FILE_ENABLED:true}
logging.file.name=${LOG_FILE_NAME:logs/vss-backend-docker.log}

# 应用信息 - Docker 环境
info.app.name=${VITE_APP_TITLE:Vision Platform Backend}
info.app.description=${VITE_APP_DESCRIPTION:Machine Vision Data Analysis Platform Backend}
info.app.version=${VITE_APP_VERSION:1.0.0}
info.app.environment=docker

# Actuator 配置 - Docker 环境（用于健康检查）
management.endpoints.web.exposure.include=${ACTUATOR_ENDPOINTS:health,info,env}
management.endpoint.health.show-details=${HEALTH_SHOW_DETAILS:always}
management.health.defaults.enabled=true

# 容器健康检查端点
management.endpoint.health.enabled=true
management.health.diskspace.enabled=true
management.health.db.enabled=true

# JWT配置 - Docker 环境
jwt.secret=${JWT_SECRET:docker-jwt-secret-change-in-production}

# 邮件配置 - Docker 环境（支持 Mailhog）
spring.mail.host=${MAIL_HOST:mailhog-dev}
spring.mail.port=${MAILHOG_SMTP_PORT:1025}
spring.mail.protocol=smtp
spring.mail.properties.mail.smtp.auth=${MAIL_AUTH:false}
spring.mail.properties.mail.smtp.starttls.enable=${MAIL_STARTTLS:false}

# 文件上传配置 - Docker 环境
file.upload.dir=${UPLOAD_DIR:/app/uploads}

# 性能配置 - Docker 环境
server.tomcat.max-threads=${TOMCAT_MAX_THREADS:200}
server.tomcat.min-spare-threads=${TOMCAT_MIN_THREADS:10}
server.tomcat.max-connections=${TOMCAT_MAX_CONNECTIONS:8192}

# ===========================================
# 生产环境配置 (prod profile)
# ===========================================
---
spring.config.activate.on-profile=prod

# 数据库配置 - PostgreSQL（生产环境）
spring.datasource.url=${DATABASE_URL:jdbc:postgresql://${DB_HOST:database}:${DB_PORT:5432}/${DB_NAME:vss_production_db}}
spring.datasource.username=${DB_USERNAME:prod_user}
spring.datasource.password=${DB_PASSWORD:prod_password}
spring.datasource.driver-class-name=org.postgresql.Driver

# 连接池配置 - 生产环境优化
spring.datasource.hikari.maximum-pool-size=${DB_MAX_CONNECTIONS:50}
spring.datasource.hikari.connection-timeout=${DB_CONNECTION_TIMEOUT:10000}
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=1800000
spring.datasource.hikari.leak-detection-threshold=60000

# JPA 配置 - 生产环境
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.jdbc.batch_size=20
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true

# H2 控制台 - 生产环境禁用
spring.h2.console.enabled=false

# 日志配置 - 生产环境
logging.level.root=${LOG_ROOT_LEVEL:ERROR}
logging.level.com.vision=${LOG_LEVEL:WARN}
logging.level.org.springframework.security=WARN
logging.level.org.springframework.web=WARN

# 文件日志 - 生产环境
logging.file.enabled=true
logging.file.name=logs/vss-backend-prod.log
logging.logback.rollingpolicy.max-file-size=100MB
logging.logback.rollingpolicy.total-size-cap=1GB
logging.logback.rollingpolicy.max-history=30

# CORS 配置 - 生产环境严格设置
cors.allowed-origins=${CORS_ORIGIN:https://vss-platform.com}
cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
cors.allowed-headers=Content-Type,Authorization,X-Requested-With
cors.allow-credentials=true

# 健康检查 - 生产环境限制信息
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=when-authorized
management.health.defaults.enabled=true

# 性能优化 - 生产环境
server.compression.enabled=true
server.compression.mime-types=text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
server.compression.min-response-size=1024

# 缓存配置 - 生产环境
spring.cache.type=${CACHE_TYPE:redis}
spring.redis.host=${REDIS_HOST:redis}
spring.redis.port=${REDIS_PORT:6379}
spring.redis.password=${REDIS_PASSWORD:}
spring.redis.timeout=2000ms
spring.redis.lettuce.pool.max-active=50
spring.redis.lettuce.pool.max-wait=-1ms
spring.redis.lettuce.pool.max-idle=8
spring.redis.lettuce.pool.min-idle=0

# 邮件配置 - 生产环境 SMTP
spring.mail.host=${MAIL_HOST:smtp.example.com}
spring.mail.port=${MAIL_PORT:587}
spring.mail.username=${MAIL_USERNAME:}
spring.mail.password=${MAIL_PASSWORD:}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# 监控配置 - 生产环境
management.metrics.export.prometheus.enabled=${PROMETHEUS_ENABLED:true}
management.endpoint.prometheus.enabled=${PROMETHEUS_ENABLED:true}