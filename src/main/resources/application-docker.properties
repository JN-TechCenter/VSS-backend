# VSS Docker 环境配置
# 此配置文件专用于 Docker 容器环境，会覆盖基础配置
# ===========================================

# 服务器配置 - Docker 环境
server.port=${SERVER_PORT:3002}
server.address=0.0.0.0

# 数据库配置 - 支持多种数据库类型
# H2 内存数据库（默认）
spring.datasource.url=${DB_URL:jdbc:h2:mem:vss_docker_db;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE}
spring.datasource.username=${DB_USERNAME:sa}
spring.datasource.password=${DB_PASSWORD:}
spring.datasource.driver-class-name=${DB_DRIVER:org.h2.Driver}

# 动态数据库配置（通过环境变量）
# 当 DB_TYPE=postgres 时，自动切换到 PostgreSQL
spring.profiles.include=${DB_TYPE:h2}

# JPA 配置 - Docker 环境
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=${JPA_SHOW_SQL:true}
spring.jpa.properties.hibernate.dialect=${JPA_DIALECT:org.hibernate.dialect.H2Dialect}
spring.jpa.properties.hibernate.format_sql=${JPA_FORMAT_SQL:true}
# 明确指定命名策略，避免字段名自动转换
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false

# H2 控制台配置 - Docker 环境
spring.h2.console.enabled=${H2_CONSOLE_ENABLED:true}
spring.h2.console.path=${H2_CONSOLE_PATH:/h2-console}
spring.h2.console.settings.web-allow-others=true

# CORS 配置 - Docker 环境（容器间通信）
cors.allowed-origins=${CORS_ORIGIN:http://localhost:3000,http://frontend:80,http://frontend-dev:3001}
cors.allowed-methods=${CORS_METHODS:GET,POST,PUT,DELETE,OPTIONS}
cors.allowed-headers=${CORS_HEADERS:*}
cors.allow-credentials=${CORS_CREDENTIALS:true}

# 日志配置 - Docker 环境
logging.level.root=${LOG_ROOT_LEVEL:INFO}
logging.level.com.vision=${LOG_LEVEL:DEBUG}
logging.level.org.springframework.security=${SECURITY_LOG_LEVEL:DEBUG}
logging.level.org.springframework.web=${WEB_LOG_LEVEL:DEBUG}

# 文件日志 - Docker 环境（映射到卷）
logging.file.enabled=${LOG_FILE_ENABLED:true}
logging.file.name=${LOG_FILE_NAME:logs/vss-backend-docker.log}

# 应用信息 - Docker 环境
spring.application.name=${APP_NAME:VSS Backend}
info.app.name=${VITE_APP_TITLE:Vision Platform Backend}
info.app.description=${VITE_APP_DESCRIPTION:Machine Vision Data Analysis Platform Backend}
info.app.version=${VITE_APP_VERSION:1.0.0}
info.app.environment=docker

# Actuator 配置 - Docker 环境（用于健康检查）
management.endpoints.web.exposure.include=${ACTUATOR_ENDPOINTS:health,info,env}
management.endpoint.health.show-details=${HEALTH_SHOW_DETAILS:always}
management.health.defaults.enabled=true

# 容器健康检查端点
management.endpoint.health.enabled=true
management.health.diskspace.enabled=true
management.health.db.enabled=true

# 安全配置 - Docker 环境
jwt.secret=${JWT_SECRET:docker-jwt-secret-change-in-production}
jwt.expiration=${JWT_EXPIRATION:86400}
jwt.refresh-expiration=${JWT_REFRESH_EXPIRATION:604800}

# 邮件配置 - Docker 环境（支持 Mailhog）
spring.mail.host=${MAIL_HOST:mailhog-dev}
spring.mail.port=${MAILHOG_SMTP_PORT:1025}
spring.mail.protocol=smtp
spring.mail.properties.mail.smtp.auth=${MAIL_AUTH:false}
spring.mail.properties.mail.smtp.starttls.enable=${MAIL_STARTTLS:false}

# 文件上传配置 - Docker 环境
spring.servlet.multipart.max-file-size=${MAX_FILE_SIZE:10MB}
spring.servlet.multipart.max-request-size=${MAX_REQUEST_SIZE:10MB}
file.upload.dir=${UPLOAD_DIR:/app/uploads}

# 性能配置 - Docker 环境
server.tomcat.max-threads=${TOMCAT_MAX_THREADS:200}
server.tomcat.min-spare-threads=${TOMCAT_MIN_THREADS:10}
server.tomcat.max-connections=${TOMCAT_MAX_CONNECTIONS:8192}
